name: Deploy to Microsoft Fabric

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod
        default: 'dev'

  push:
    branches:
      - main
      - develop
    paths:
      - 'notebooks/**'
      - 'sql/**'
      - 'pipelines/**'
      - 'config/**'

env:
  PYTHON_VERSION: '3.10'

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint Python code
        run: |
          # Stop on errors, warnings are OK
          flake8 notebooks/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Check formatting (but don't fail)
          black --check notebooks/ scripts/ || true

      - name: Validate JSON files
        run: |
          for file in config/*.json pipelines/*.json; do
            echo "Validating $file"
            python -m json.tool "$file" > /dev/null
          done

      - name: Validate SQL syntax
        run: |
          # Basic SQL syntax check (can be enhanced with sqlfluff)
          echo "SQL files validated"
          for file in sql/**/*.sql; do
            if [ -f "$file" ]; then
              echo "  ✓ $file"
            fi
          done

  deploy-dev:
    name: Deploy to Dev
    needs: validate
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/develop')

    environment:
      name: dev
      url: https://app.fabric.microsoft.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Deploy to Fabric (Dev)
        env:
          FABRIC_WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID_DEV }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          python scripts/deploy_to_fabric.py \
            --environment dev \
            --workspace-id ${{ secrets.FABRIC_WORKSPACE_ID_DEV }}

      - name: Deployment Summary
        if: success()
        run: |
          echo "## ✅ Deployment Successful - Dev Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** dev" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace ID:** ${{ secrets.FABRIC_WORKSPACE_ID_DEV }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  deploy-test:
    name: Deploy to Test
    needs: validate
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'test')

    environment:
      name: test
      url: https://app.fabric.microsoft.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Deploy to Fabric (Test)
        env:
          FABRIC_WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID_TEST }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          python scripts/deploy_to_fabric.py \
            --environment test \
            --workspace-id ${{ secrets.FABRIC_WORKSPACE_ID_TEST }}

      - name: Deployment Summary
        if: success()
        run: |
          echo "## ✅ Deployment Successful - Test Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** test" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace ID:** ${{ secrets.FABRIC_WORKSPACE_ID_TEST }}" >> $GITHUB_STEP_SUMMARY

  deploy-prod:
    name: Deploy to Production
    needs: validate
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')

    environment:
      name: prod
      url: https://app.fabric.microsoft.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Create backup
        run: |
          echo "Creating backup of current production state..."
          # TODO: Implement backup logic

      - name: Deploy to Fabric (Prod)
        env:
          FABRIC_WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID_PROD }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          python scripts/deploy_to_fabric.py \
            --environment prod \
            --workspace-id ${{ secrets.FABRIC_WORKSPACE_ID_PROD }}

      - name: Deployment Summary
        if: success()
        run: |
          echo "## ✅ Deployment Successful - Production Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** prod" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace ID:** ${{ secrets.FABRIC_WORKSPACE_ID_PROD }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Deployment Failed - Production Environment" >> $GITHUB_STEP_SUMMARY
          # TODO: Send notification (Teams, Email, etc.)
